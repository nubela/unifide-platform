// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var LIMIT_LENGTH, SEARCH_CONTAINER_CALLBACK, SEARCH_ITEM_CALLBACK, SEARCH_USER_CALLBACK, WIDGET_SESSION, getItemContainerPathLis;



  LIMIT_LENGTH = 8;

  SEARCH_ITEM_CALLBACK = null;

  SEARCH_CONTAINER_CALLBACK = null;

  SEARCH_USER_CALLBACK = null;

  WIDGET_SESSION = {
    ITEM_KEYWORD: "WItemKeyword",
    CONTAINER_KEYWORD: "WContainerKeyword",
    USER_KEYWORD: "WUserKeyword"
  };

  Template.search_item_widget.rendered = function() {
    return $(".select-item").on("click", function() {
      var cb;
      cb = SEARCH_ITEM_CALLBACK;
      if (cb != null) {
        cb(true, $(this).attr("data-item-id"), $(this).attr("data-item-name"));
      }
      return $("#search-item-modal").modal("hide");
    });
  };

  Template.search_item_widget.has_results = function() {
    var kw;
    kw = Session.get(WIDGET_SESSION.ITEM_KEYWORD);
    if (kw != null) {
      return ITMItems.find({
        $or: [
          {
            name: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }, {
            description: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }
        ]
      }, {
        limit: LIMIT_LENGTH
      }).fetch().length > 0;
    }
    return false;
  };

  Template.search_item_widget.results = function() {
    var kw;
    kw = Session.get(WIDGET_SESSION.ITEM_KEYWORD);
    if (kw != null) {
      return ITMItems.find({
        $or: [
          {
            name: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }, {
            description: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }
        ]
      }, {
        limit: LIMIT_LENGTH,
        transform: function(doc) {
          doc.path_lis = getItemContainerPathLis(doc).join(" / ");
          doc.id_str = doc._id.valueOf();
          return doc;
        }
      });
    }
  };

  Template.search_container_widget.rendered = function() {
    return $(".select-container").on("click", function() {
      var cb;
      cb = SEARCH_CONTAINER_CALLBACK;
      if (cb != null) {
        cb(true, $(this).attr("data-container-id"), $(this).attr("data-container-name"));
      }
      return $("#search-container-modal").modal("hide");
    });
  };

  Template.search_container_widget.has_results = function() {
    var kw;
    kw = Session.get(WIDGET_SESSION.CONTAINER_KEYWORD);
    if (kw != null) {
      return ITMChildCategories.find({
        $or: [
          {
            name: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }, {
            description: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }
        ]
      }, {
        limit: LIMIT_LENGTH
      }).fetch().length > 0;
    }
    return false;
  };

  Template.search_container_widget.results = function() {
    var kw;
    kw = Session.get(WIDGET_SESSION.CONTAINER_KEYWORD);
    if (kw != null) {
      return ITMChildCategories.find({
        $or: [
          {
            name: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }, {
            description: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }
        ]
      }, {
        limit: LIMIT_LENGTH,
        transform: function(doc) {
          doc.path_lis = doc.materialized_path.join(" / ");
          doc.id_str = doc._id.valueOf();
          return doc;
        }
      });
    }
  };

  Template.search_user_widget.rendered = function() {
    return $(".select-user").on("click", function() {
      var cb;
      cb = SEARCH_USER_CALLBACK;
      if (cb != null) {
        cb(true, $(this).attr("data-user-id"), $(this).attr("data-user-name"), $(this).attr("data-user-email"));
      }
      return $("#search-user-modal").modal("hide");
    });
  };

  Template.search_user_widget.has_results = function() {
    var kw;
    kw = Session.get(WIDGET_SESSION.USER_KEYWORD);
    if (kw != null) {
      return PlopUser.find({
        $or: [
          {
            username: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }, {
            email: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }
        ]
      }, {
        limit: LIMIT_LENGTH
      }).fetch().length > 0;
    }
    return false;
  };

  Template.search_user_widget.results = function() {
    var kw;
    kw = Session.get(WIDGET_SESSION.USER_KEYWORD);
    if (kw != null) {
      return PlopUser.find({
        $or: [
          {
            username: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }, {
            email: {
              $regex: ".*" + kw + ".*",
              $options: 'i'
            }
          }
        ]
      }, {
        limit: LIMIT_LENGTH,
        transform: function(doc) {
          doc.id_str = doc._id.valueOf();
          doc.has_email_and_username = (doc.username != null) && (doc.email != null);
          doc.has_only_email = (doc.username == null) && (doc.email != null);
          doc.has_only_username = (doc.username != null) && (doc.email == null);
          return doc;
        }
      });
    }
  };

  this.searchItemId = function(cb) {
    "Opens the search item widget for the user to search for a specific item,\nwith a callback that takes in 3 arguments, specifically: (success, item_id, item_name)";
    Session.set(WIDGET_SESSION.ITEM_KEYWORD, null);
    SEARCH_ITEM_CALLBACK = cb;
    Meteor.subscribe("all_containers");
    Meteor.subscribe("all_items");
    $("#search-item-modal").on("shown", function() {
      $("#item-search-keyword").focus();
      return $("#item-search-keyword").on("change paste keyup", function() {
        var kw;
        kw = $.trim($(this).val());
        if (kw != null) {
          return Session.set(WIDGET_SESSION.ITEM_KEYWORD, kw);
        }
      });
    });
    $("#search-item-widget-close-btn").click(function() {
      if (cb != null) {
        cb(false);
      }
      return $("#search-item-modal").modal("hide");
    });
    return $("#search-item-modal").modal({
      backdrop: "static"
    });
  };

  this.searchContainerId = function(cb) {
    "Opens the container search widget for the user to search for a specific container,\nwith a callback that takes in 3 arguments, specifically: (success, container_id, container_name)";
    Session.set(WIDGET_SESSION.CONTAINER_KEYWORD, null);
    SEARCH_CONTAINER_CALLBACK = cb;
    Meteor.subscribe("all_containers");
    $("#search-container-modal").on("shown", function() {
      $("#container-search-keyword").focus();
      return $("#container-search-keyword").on("change paste keyup", function() {
        var kw;
        kw = $.trim($(this).val());
        if (kw != null) {
          return Session.set(WIDGET_SESSION.CONTAINER_KEYWORD, kw);
        }
      });
    });
    $("#search-container-widget-close-btn").click(function() {
      if (cb != null) {
        cb(false);
      }
      return $("#search-container-modal").modal("hide");
    });
    return $("#search-container-modal").modal({
      backdrop: "static"
    });
  };

  this.searchUserId = function(cb) {
    "Opens the user search widget for the admin to search for a specific user,\nwith a callback that takes in 4 arguments, specifically: (success, user_id, username, email)";
    Session.set(WIDGET_SESSION.USER_KEYWORD, null);
    SEARCH_USER_CALLBACK = cb;
    Meteor.subscribe("all_users");
    $("#search-user-modal").on("shown", function() {
      $("#user-search-keyword").focus();
      return $("#user-search-keyword").on("change paste keyup", function() {
        var kw;
        kw = $.trim($(this).val());
        if (kw != null) {
          return Session.set(WIDGET_SESSION.USER_KEYWORD, kw);
        }
      });
    });
    $("#search-user-widget-close-btn").click(function() {
      if (cb != null) {
        cb(false);
      }
      return $("#search-user-modal").modal("hide");
    });
    return $("#search-user-modal").modal({
      backdrop: "static"
    });
  };

  getItemContainerPathLis = function(item_doc) {

    /*
    Returns the path lis of an item
    */
    var container_obj;
    container_obj = ITMChildCategories.findOne({
      _id: item_doc.container_id
    });
    return container_obj.materialized_path;
  };

}).call(this);
