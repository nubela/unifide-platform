// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ITEMS_PER_PAGE, createOrder, getPage, getPageNo, getUpdateOrder, rehashOrderItems;



  this.ORDER_SESSION = {
    SUBURL: "ORDERSubUrl",
    ID_FILTER: "ORDERIdFilter",
    USER_ID_FILTER: "ORDERUserIdFilter"
  };

  this.ORDER_TEMPLATE = {
    MAIN: "order_all",
    NEW: "order_compose"
  };

  this.ORDER_PAGE = {
    MAIN: "all",
    COMPOSE: "new",
    UPDATE: "update"
  };

  ITEMS_PER_PAGE = 20;

  Template.order.rendered = function() {
    return scrollTop();
  };

  Template.order.view = function() {
    return Template[getPage()]();
  };

  Template.order_all.created = function() {
    Session.set(ORDER_SESSION.USER_ID_FILTER, null);
    return Session.set(ORDER_SESSION.ID_FILTER, null);
  };

  Template.order_all.rendered = function() {
    Meteor.subscribe("all_users");
    Meteor.subscribe("all_items");
    Meteor.subscribe("all_orders");
    $("#filter-by-id").off("change paste keyup");
    return $("#filter-by-id").on("change paste keyup", function(evt) {
      return Session.set(ORDER_SESSION.ID_FILTER, $(evt.target).val());
    });
  };

  Template.order_all.events = {
    "click #search-by-user": function(evt) {
      return searchUserId(function(success, user_id, username, email) {
        $("#filter-by-id").val("");
        Session.set(ORDER_SESSION.ID_FILTER, null);
        return Session.set(ORDER_SESSION.USER_ID_FILTER, user_id);
      });
    },
    "click [data-expand]": function(evt) {
      var elem, id;
      elem = $(evt.target).parents("[data-expand]")[0];
      id = $(elem).attr("data-expand");
      $("[data-expanded]").addClass("hidden");
      return $("[data-expanded=" + id + "]").removeClass("hidden");
    }
  };

  Template.order_all.orders = function() {
    var dic, id_filter, page_no_0_idx, user_id_filter;
    page_no_0_idx = getPageNo() - 1;
    id_filter = Session.get(ORDER_SESSION.ID_FILTER);
    user_id_filter = Session.get(ORDER_SESSION.USER_ID_FILTER);
    dic = {};
    if ((id_filter != null) && id_filter.length > 0) {
      dic = {
        _id: new Meteor.Collection.ObjectID(id_filter)
      };
    } else if ((user_id_filter != null) && user_id_filter.length > 0) {
      dic = {
        user_id: user_id_filter
      };
    }
    return Order.find(dic, {
      limit: ITEMS_PER_PAGE,
      skip: page_no_0_idx * ITEMS_PER_PAGE,
      sort: {
        modification_timestamp_utc: -1
      },
      transform: function(doc) {
        var all_items, items_descriptive, last_mod;
        last_mod = moment(doc.timestamp_utc);
        doc["id"] = doc._id.valueOf();
        doc["timestamp"] = last_mod.format('MMMM Do YYYY');
        doc["user"] = PlopUser.findOne({
          _id: new Meteor.Collection.ObjectID(doc.user_id)
        });
        if (doc["user"] != null) {
          doc["user"]["full_name"] = "" + doc["user"].first_name + " " + doc["user"].middle_name + " " + doc["user"].last_name;
          doc["user"]["full_name_trunc"] = doc["user"]["full_name"].substring(0, 30);
        } else {
          doc["user"] = {
            "full_name": "Anonymous",
            "full_name_trunc": "Anonymous"
          };
        }
        all_items = [];
        items_descriptive = [];
        _.each(doc.items, function(item_desc_obj) {
          var item, qty;
          item = ITMItems.findOne({
            _id: new Meteor.Collection.ObjectID(item_desc_obj.obj_id)
          });
          qty = item_desc_obj.quantity;
          all_items.push(item.name);
          return items_descriptive.push("" + item.name + " &times; " + qty);
        });
        doc["all_items"] = all_items.join(", ");
        if (doc["all_items"].length > 30) {
          doc["all_items"] = doc["all_items"].substring(0, 30) + "..";
        }
        doc["item_descriptive"] = items_descriptive.join("</br>");
        return doc;
      }
    });
  };

  Template.order_all.current_page = function() {
    return getPageNo();
  };

  Template.order_all.next_page_url = function() {
    var next_page, page_no;
    page_no = getPageNo();
    next_page = page_no + 1;
    return "/order/" + next_page;
  };

  Template.order_all.prev_page_url = function() {
    var page_no, prev_page;
    page_no = getPageNo();
    prev_page = page_no - 1;
    return "/order/" + prev_page;
  };

  Template.order_all.has_next = function() {
    var total_items, total_pages;
    total_items = Order.find({}).count();
    total_pages = Math.ceil(total_items / ITEMS_PER_PAGE);
    return getPageNo() < total_pages;
  };

  Template.order_all.has_prev = function() {
    return getPageNo() >= 2;
  };

  Template.order_compose.created = function() {
    Meteor.subscribe("all_users");
    Meteor.subscribe("all_shipping");
    Meteor.subscribe("all_items");
    return Meteor.subscribe("all_orders");
  };

  Template.order_compose.rendered = function() {
    var update_order;
    $("#order-compose-form").off("submit");
    $("#order-compose-form").on("submit", function(evt) {
      evt.preventDefault();
      return createOrder();
    });
    rehashOrderItems();
    update_order = getUpdateOrder();
    if (update_order) {
      return $("option[value=" + update_order.status + "]").attr("selected", true);
    }
  };

  Template.order_compose.shipping_methods = function() {
    return ShippingRule.find({}, {
      transform: function(doc) {
        doc["id"] = doc._id.valueOf();
        return doc;
      }
    });
  };

  Template.order_compose.order_to_update = function() {
    return getUpdateOrder();
  };

  Template.order_compose.events = {
    "click .submit-btn": function(evt) {
      evt.preventDefault();
      return createOrder();
    },
    "click #add-order-item-btn": function(evt) {
      var order_item_template;
      order_item_template = $("#order-item-template").clone().removeAttr("id").removeClass("hidden");
      $("#order-item-container").append(order_item_template);
      return rehashOrderItems();
    },
    "click .rm-order-item-btn": function(evt) {
      $(evt.target).parents(".control-group").remove();
      return rehashOrderItems();
    },
    "focus #user_id": function(evt) {
      return searchUserId(function(success, user_id, username, email) {
        if (success) {
          return $(evt.target).val("" + username + " " + email).attr("data-user-id", user_id);
        }
      });
    },
    "click .item-selection": function(evt) {
      return searchItemId(function(success, item_id, item_name) {
        if (success) {
          return $(evt.target).val(item_name).attr("data-item-id", item_id);
        }
      });
    }
  };

  getUpdateOrder = function() {
    var slugs;
    slugs = Session.get(ORDER_SESSION.SUBURL);
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs[0] !== ORDER_PAGE.UPDATE) {
      return null;
    }
    return Order.findOne({
      _id: slugs[1]
    }, {
      transform: function(doc) {
        var item, item_desc_obj, qty, _i, _len, _ref;
        doc["user"] = PlopUser.findOne({
          _id: new Meteor.Collection.ObjectID(doc.user_id)
        });
        doc["id"] = doc._id.valueOf();
        doc["all_items"] = [];
        _ref = doc.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item_desc_obj = _ref[_i];
          item = ITMItems.findOne({
            _id: new Meteor.Collection.ObjectID(item_desc_obj.obj_id)
          });
          item.id = item._id.valueOf();
          qty = item_desc_obj.quantity;
          doc["all_items"].push({
            item: item,
            qty: qty
          });
        }
        return doc;
      }
    });
  };

  getPageNo = function() {
    var slugs;
    slugs = Session.get(ORDER_SESSION.SUBURL);
    if (slugs == null) {
      return 1;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      return parseInt(slugs[0]);
    }
    return 1;
  };

  rehashOrderItems = function() {
    var i;
    i = 1;
    return _.each($(".order-item"), function(order_item) {
      if ($(order_item).attr("id") == null) {
        $(order_item).find(".item_no").text(i);
        return i += 1;
      }
    });
  };

  createOrder = function() {
    var dic;
    if ($("#order-compose-form").parsley("validate")) {
      dic = {
        _id: $("#order-id") != null ? $("#order-id").val() : null,
        apply_debits_credits: $("apply_debits_credits").val(),
        user_id: $("#user_id").attr("data-user-id"),
        status: $("#status").val(),
        user_notes: $("#request-notes").val(),
        admin_notes: $("#admin-notes").val(),
        apply_coupon: $("#coupon-code").val(),
        shipping_method: $("#shipping-method").val(),
        items: []
      };
      _.each($(".order-item"), function(order_item) {
        var item_id, quantity;
        if ($(order_item).attr("id") == null) {
          quantity = $(order_item).find(".qty").val();
          item_id = $(order_item).find(".item-selection").attr("data-item-id");
          return dic.items.push({
            obj_id: item_id,
            quantity: quantity
          });
        }
      });
      dic.items = JSON.stringify(dic.items);
      return Meteor.call("new_manual_order", dic, function() {
        return Router.navigate("/order", {
          trigger: true
        });
      });
    }
  };

  getPage = function() {
    var slugs;
    slugs = Session.get(ORDER_SESSION.SUBURL);
    if (slugs == null) {
      return ORDER_TEMPLATE.MAIN;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      if (slugs[0] === ORDER_PAGE.COMPOSE) {
        return ORDER_TEMPLATE.NEW;
      } else if (slugs[0] === ORDER_PAGE.UPDATE) {
        return ORDER_TEMPLATE.NEW;
      }
    }
    return ORDER_TEMPLATE.MAIN;
  };

}).call(this);
