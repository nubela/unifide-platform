// Generated by CoffeeScript 1.6.3
(function() {
  var ITEMS_PER_PAGE, createUser, getPage, getPageNo;

  this.USER_SESSION = {
    SUBURL: "USERSubUrl",
    USERNAME_FILTER: "USERFilterUsername",
    EMAIL_FILTER: "USERFilterEmail"
  };

  this.USER_TEMPLATE = {
    MAIN: "user_all",
    NEW: "user_compose"
  };

  this.USER_PAGE = {
    MAIN: "all",
    COMPOSE: "new"
  };

  ITEMS_PER_PAGE = 20;

  Template.user.rendered = function() {
    return scrollTop();
  };

  Template.user.view = function() {
    return Template[getPage()]();
  };

  Template.user_all.created = function() {
    Meteor.subscribe("all_users");
    Session.set(USER_SESSION.USERNAME_FILTER, "");
    return Session.set(USER_SESSION.EMAIL_FILTER, "");
  };

  Template.user_all.rendered = function() {
    $("#filter-by-username").off("change paste keyup");
    $("#filter-by-username").on("change paste keyup", function(evt) {
      return Session.set(USER_SESSION.USERNAME_FILTER, $(evt.target).val());
    });
    $("#filter-by-email").off("change paste keyup");
    return $("#filter-by-email").on("change paste keyup", function(evt) {
      return Session.set(USER_SESSION.EMAIL_FILTER, $(evt.target).val());
    });
  };

  Template.user_all.users = function() {
    var email_filter, page_no_0_idx, username_filter;
    page_no_0_idx = getPageNo() - 1;
    username_filter = Session.get(USER_SESSION.USERNAME_FILTER);
    email_filter = Session.get(USER_SESSION.EMAIL_FILTER);
    return PlopUser.find({
      username: {
        $regex: ".*" + username_filter + ".*",
        $options: 'i'
      },
      email: {
        $regex: ".*" + email_filter + ".*",
        $options: 'i'
      }
    }, {
      limit: ITEMS_PER_PAGE,
      skip: page_no_0_idx * ITEMS_PER_PAGE,
      sort: {
        modification_timestamp_utc: -1
      },
      transform: function(doc) {
        doc["id"] = doc._id.valueOf();
        doc["full_name"] = "" + doc.first_name + " " + doc.middle_name + " " + doc.last_name;
        return doc;
      }
    });
  };

  Template.user_all.events = {
    "click [data-expand]": function(evt) {
      var elem, id;
      elem = $(evt.target).parents("[data-expand]")[0];
      id = $(elem).attr("data-expand");
      $("[data-expanded]").addClass("hidden");
      return $("[data-expanded=" + id + "]").removeClass("hidden");
    }
  };

  Template.user_compose.created = function() {
    return Meteor.subscribe("all_groups");
  };

  Template.user_compose.groups = function() {
    return Group.find({}, {
      sort: {
        name: 1
      }
    });
  };

  Template.user_compose.events = {
    "submit #user-compose-form": function(evt) {
      evt.preventDefault();
      return createUser();
    },
    "click .save-btn": function(evt) {
      evt.preventDefault();
      return createUser();
    }
  };

  getPageNo = function() {
    var slugs;
    slugs = Session.get(USER_SESSION.SUBURL);
    if (slugs == null) {
      return 1;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      return parseInt(slugs[0]);
    }
    return 1;
  };

  createUser = function() {
    var data_lis, dic, entry, _i, _len;
    if ($("#user-compose-form").parsley("validate")) {
      data_lis = $("#user-compose-form").serializeArray();
      dic = {};
      for (_i = 0, _len = data_lis.length; _i < _len; _i++) {
        entry = data_lis[_i];
        dic[entry.name] = entry.value;
      }
      dic.user_groups = JSON.stringify($("#user-groups").val());
      dic.status = $("#status").val();
      return Meteor.call("new_user", dic, function() {
        return Router.navigate("/user");
      });
    }
  };

  getPage = function() {
    var slugs;
    slugs = Session.get(USER_SESSION.SUBURL);
    if (slugs == null) {
      return USER_TEMPLATE.MAIN;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      if (slugs[0] === USER_PAGE.COMPOSE) {
        return USER_TEMPLATE.NEW;
      }
    }
    return USER_TEMPLATE.MAIN;
  };

}).call(this);
