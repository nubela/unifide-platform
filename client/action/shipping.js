// Generated by CoffeeScript 1.6.3
(function() {
  var ITEMS_PER_PAGE, createShipping, getPage, getPageNo;

  this.SHIPPING_SESSION = {
    SUBURL: "SHIPPINGSubUrl"
  };

  this.SHIPPING_TEMPLATE = {
    MAIN: "shipping_all",
    NEW: "shipping_compose"
  };

  this.SHIPPING_PAGE = {
    MAIN: "all",
    COMPOSE: "new"
  };

  ITEMS_PER_PAGE = 20;

  Template.shipping.rendered = function() {
    return scrollTop();
  };

  Template.shipping.view = function() {
    return Template[getPage()]();
  };

  Template.shipping_all.created = function() {
    Meteor.subscribe("all_admin");
    return Meteor.subscribe("all_shipping");
  };

  Template.shipping_all.all_methods = function() {
    var page_no_0_idx;
    page_no_0_idx = getPageNo() - 1;
    return ShippingRule.find({}, {
      limit: ITEMS_PER_PAGE,
      skip: page_no_0_idx * ITEMS_PER_PAGE,
      sort: {
        modification_timestamp_utc: -1
      },
      transform: function(doc) {
        doc["id"] = doc._id.valueOf();
        doc["admin"] = Meteor.users.findOne({
          _id: doc.admin_id
        });
        doc["has_disable_btn"] = doc.status === "enabled";
        doc["origin_desc"] = null;
        if (doc["from_location"] && doc["to_location"]) {
          doc["origin_desc"] = "This method is only valid if items are shipped from <u>" + doc["from_location"] + "</u> to <u>" + doc["to_location"] + "</u>.";
        } else if (doc["from_location"]) {
          doc["origin_desc"] = "This method is only valid if items are shipped from <u>" + doc["from_location"] + "</u>.";
        } else if (doc["to_location"]) {
          doc["origin_desc"] = "This method is only valid if items are shipped to <u>" + doc["from_location"] + "</u>.";
        }
        return doc;
      }
    });
  };

  Template.shipping_all.events = {
    "click [data-expand]": function(evt) {
      var elem, id;
      elem = $(evt.target).parents("[data-expand]")[0];
      id = $(elem).attr("data-expand");
      $("[data-expanded]").addClass("hidden");
      return $("[data-expanded=" + id + "]").removeClass("hidden");
    },
    "click .disable-btn": function(evt) {
      var shipping_id;
      shipping_id = $(evt.target).parents("[data-expanded]").attr("data-expanded");
      ShippingRule.update({
        _id: new Meteor.Collection.ObjectID(shipping_id)
      }, {
        $set: {
          status: "disabled"
        }
      });
      return flashAlert("Shipping method disabled.", "");
    },
    "click .enable-btn": function(evt) {
      var shipping_id;
      shipping_id = $(evt.target).parents("[data-expanded]").attr("data-expanded");
      ShippingRule.update({
        _id: new Meteor.Collection.ObjectID(shipping_id)
      }, {
        $set: {
          status: "enabled"
        }
      });
      return flashAlert("Shipping method enabled.", "");
    },
    "click .delete-btn": function(evt) {
      var shipping_method_id;
      shipping_method_id = $(evt.target).parents("[data-expanded]").attr("data-expanded");
      return bootbox.confirm("Confirm delete?", function(res) {
        if (res) {
          return ShippingRule.remove({
            _id: new Meteor.Collection.ObjectID(shipping_method_id)
          });
        }
      });
    }
  };

  Template.shipping_all.current_page = function() {
    return getPageNo();
  };

  Template.shipping_all.next_page_url = function() {
    var next_page, page_no;
    page_no = getPageNo();
    next_page = page_no + 1;
    return "/shipping/" + next_page;
  };

  Template.shipping_all.prev_page_url = function() {
    var page_no, prev_page;
    page_no = getPageNo();
    prev_page = page_no - 1;
    return "/shipping/" + prev_page;
  };

  Template.shipping_all.has_next = function() {
    var total_items, total_pages;
    total_items = ShippingRule.find({}).count();
    total_pages = Math.ceil(total_items / ITEMS_PER_PAGE);
    return getPageNo() < total_pages;
  };

  Template.shipping_all.has_prev = function() {
    return getPageNo() >= 2;
  };

  Template.shipping_compose.rendered = function() {
    $("#shipping-compose-form").off("submit");
    return $("#shipping-compose-form").on("submit", function(evt) {
      evt.preventDefault();
      return createShipping();
    });
  };

  Template.shipping_compose.events = {
    "click .submit-btn": function(evt) {
      evt.preventDefault();
      return createShipping();
    }
  };

  getPageNo = function() {
    var slugs;
    slugs = Session.get(SHIPPING_SESSION.SUBURL);
    if (slugs == null) {
      return 1;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      return parseInt(slugs[0]);
    }
    return 1;
  };

  createShipping = function() {
    var data_lis, dic, entry, _i, _len;
    if ($("#shipping-compose-form").parsley("validate")) {
      data_lis = $("#shipping-compose-form").serializeArray();
      dic = {};
      for (_i = 0, _len = data_lis.length; _i < _len; _i++) {
        entry = data_lis[_i];
        dic[entry.name] = entry.value;
      }
      return Meteor.call("new_shipping_method", dic, function() {
        return Router.navigate("/shipping", true);
      });
    }
  };

  getPage = function() {
    var slugs;
    slugs = Session.get(SHIPPING_SESSION.SUBURL);
    if (slugs == null) {
      return SHIPPING_TEMPLATE.MAIN;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      if (slugs[0] === SHIPPING_PAGE.COMPOSE) {
        return SHIPPING_TEMPLATE.NEW;
      }
    }
    return SHIPPING_TEMPLATE.MAIN;
  };

}).call(this);
