// Generated by CoffeeScript 1.6.3
(function() {
  var ITEMS_PER_PAGE, createCashback, getCashbackTemplate, getPageNo, getSecondaryPageNo;

  this.CASHBACK_SESSION = {
    SUBURL: "CBSubUrl",
    USER_CREDIT_USERNAME_FILTER: "CBUsernameFilter"
  };

  this.CASHBACK_TEMPLATE = {
    MAIN: "cashback_rules",
    COMPOSE_RULE: "cashback_compose",
    TRANSACTION_LOG: "cashback_transaction_log",
    USER_CREDIT_STORE: "cashback_user_values"
  };

  this.CASHBACK_PAGE = {
    MAIN: "rule",
    COMPOSE: "compose",
    TRANSACTION: "log",
    USER_CREDIT: "user-credit"
  };

  ITEMS_PER_PAGE = 20;

  Template.cashback.view = function() {
    return Template[getCashbackTemplate()]();
  };

  Template.cashback.rendered = function() {
    return scrollTop();
  };

  Template.cashback_rules.created = function() {
    Meteor.subscribe("all_admins");
    return Meteor.subscribe("all_cashbacks");
  };

  Template.cashback_rules.rendered = function() {
    return null;
  };

  Template.cashback_rules.active_rule = function() {
    return Cashback.findOne({
      status: "enabled"
    }, {
      transform: function(doc) {
        var last_mod;
        last_mod = moment(doc.modification_timestamp_utc);
        doc["id"] = doc._id.valueOf();
        doc["quick_desc"] = "" + doc.cashback_percentage + "% cashback with a minimum spending of $" + doc.total_minimum_spending;
        doc["last_mod_date"] = last_mod.format('MMMM Do YYYY');
        doc["admin"] = Meteor.users.findOne({
          _id: doc.admin_id
        });
        return doc;
      }
    });
  };

  Template.cashback_rules.cashbacks = function() {
    var page_no_0_idx;
    page_no_0_idx = getPageNo() - 1;
    return Cashback.find({}, {
      limit: ITEMS_PER_PAGE,
      skip: page_no_0_idx * ITEMS_PER_PAGE,
      sort: {
        modification_timestamp_utc: -1
      },
      transform: function(doc) {
        var last_mod;
        last_mod = moment(doc.modification_timestamp_utc);
        doc["id"] = doc._id.valueOf();
        doc["quick_desc"] = "" + doc.cashback_percentage + "% cashback with a minimum spending of $" + doc.total_minimum_spending;
        doc["last_mod_date"] = last_mod.format('MMMM Do YYYY');
        doc["admin"] = Meteor.users.findOne({
          _id: doc.admin_id
        });
        doc["is_disabled"] = doc.status === "disabled";
        return doc;
      }
    });
  };

  Template.cashback_rules.cashbacks_count = function() {
    return Cashback.find().count();
  };

  Template.cashback_rules.current_page = function() {
    return getPageNo();
  };

  Template.cashback_rules.next_page_url = function() {
    var next_page, page_no;
    page_no = getPageNo();
    next_page = page_no + 1;
    return "/cashback/" + next_page;
  };

  Template.cashback_rules.prev_page_url = function() {
    var page_no, prev_page;
    page_no = getPageNo();
    prev_page = page_no - 1;
    return "/cashback/" + prev_page;
  };

  Template.cashback_rules.has_next = function() {
    var total_items, total_pages;
    total_items = Cashback.find({}).count();
    total_pages = Math.ceil(total_items / ITEMS_PER_PAGE);
    return getPageNo() < total_pages;
  };

  Template.cashback_rules.has_prev = function() {
    return getPageNo() >= 2;
  };

  Template.cashback_rules.events = {
    "click #disable-active": function(evt) {
      return bootbox.confirm("Confirm disable cashback?", function(res) {
        var cashback_obj;
        cashback_obj = Cashback.findOne({
          status: "enabled"
        });
        if (res && (cashback_obj != null)) {
          Cashback.update({
            _id: cashback_obj._id
          }, {
            $set: {
              status: "disabled"
            }
          });
          return flashAlert("Cashback disabled", "");
        }
      });
    },
    "click .obj-row": function(evt) {
      $(".expanded").addClass("hidden");
      return $(evt.target).parents(".obj-row").find(".expanded").removeClass("hidden");
    },
    "click .make-active": function(evt) {
      var cashback_id, cashback_obj;
      cashback_obj = Cashback.findOne({
        status: "enabled"
      });
      if (cashback_obj != null) {
        Cashback.update({
          _id: cashback_obj._id
        }, {
          $set: {
            status: "disabled"
          }
        });
      }
      cashback_id = $(evt.target).parents(".obj-row").attr("data-cashback-id");
      Cashback.update({
        _id: new Meteor.Collection.ObjectID(cashback_id)
      }, {
        $set: {
          status: "enabled"
        }
      });
      return flashAlert("Cashback enabled!", "");
    }
  };

  Template.cashback_compose.rendered = function() {
    $("#cashback-compose-form").off("submit");
    return $("#cashback-compose-form").on("submit", function(evt) {
      evt.preventDefault();
      return createCashback("true");
    });
  };

  Template.cashback_compose.events = {
    "click .save-active-btn": function(evt) {
      evt.preventDefault();
      return createCashback("true");
    },
    "click .save-btn": function(evt) {
      evt.preventDefault();
      return createCashback();
    }
  };

  Template.cashback_user_values.created = function() {
    Meteor.subscribe("all_users");
    Meteor.subscribe("all_credit_stores");
    return Session.set(CASHBACK_SESSION.USER_CREDIT_USERNAME_FILTER, "");
  };

  Template.cashback_user_values.rendered = function() {
    $("#username-email-filter").off("change paste keyup");
    return $("#username-email-filter").on("change paste keyup", function(evt) {
      return Session.set(CASHBACK_SESSION.USER_CREDIT_USERNAME_FILTER, $(evt.target).val());
    });
  };

  Template.cashback_user_values.users = function() {
    var dic, page_no_0_idx, user_id_lis, username_email_filter, users;
    page_no_0_idx = getSecondaryPageNo() - 1;
    username_email_filter = $.trim(Session.get(CASHBACK_SESSION.USER_CREDIT_USERNAME_FILTER));
    users = PlopUser.find({
      $or: [
        {
          username: {
            $regex: ".*" + username_email_filter + ".*",
            $options: 'i'
          }
        }, {
          email: {
            $regex: ".*" + username_email_filter + ".*",
            $options: 'i'
          }
        }
      ]
    }).fetch();
    console.log({
      $or: [
        {
          username: {
            $regex: ".*" + username_email_filter + ".*",
            $options: 'i'
          }
        }, {
          email: {
            $regex: ".*" + username_email_filter + ".*",
            $options: 'i'
          }
        }
      ]
    });
    user_id_lis = _.map(users, function(u) {
      return u._id;
    });
    dic = {};
    if (username_email_filter.length > 0) {
      dic = {
        user_id: {
          $in: user_id_lis
        }
      };
    }
    return CreditStore.find(dic, {
      limit: ITEMS_PER_PAGE,
      skip: page_no_0_idx * ITEMS_PER_PAGE,
      sort: {
        modification_timestamp_utc: -1
      },
      transform: function(doc) {
        var last_mod;
        last_mod = moment(doc.modification_timestamp_utc);
        doc["last_mod_date"] = last_mod.format('MMMM Do YYYY');
        doc["id"] = doc._id.valueOf();
        doc["user"] = PlopUser.findOne({
          _id: doc.user_id
        });
        return doc;
      }
    });
  };

  Template.cashback_user_values.events = {
    "click .obj-row": function(evt) {
      $(".expanded").addClass("hidden");
      return $(evt.target).parents(".obj-row").find(".expanded").removeClass("hidden");
    },
    "click .adjust-btn": function(evt) {
      return bootbox.prompt("What is a new credit which you will like to set for this user?", function(res) {
        var inventory_id;
        if (isNumber(res)) {
          inventory_id = $(evt.target).parents(".obj-row").attr("data-credit-id");
          CreditStore.update({
            _id: new Meteor.Collection.ObjectID(inventory_id)
          }, {
            $set: {
              total_credit: parseInt(res)
            }
          });
          return flashAlert("Updated new credit for user!", "");
        }
      });
    }
  };

  Template.cashback_user_values.current_page = function() {
    return getSecondaryPageNo();
  };

  Template.cashback_user_values.next_page_url = function() {
    var next_page, page_no;
    page_no = getSecondaryPageNo();
    next_page = page_no + 1;
    return "/cashback/user-credit/" + next_page;
  };

  Template.cashback_user_values.prev_page_url = function() {
    var page_no, prev_page;
    page_no = getSecondaryPageNo();
    prev_page = page_no - 1;
    return "/cashback/user-credit/" + prev_page;
  };

  Template.cashback_user_values.has_next = function() {
    var total_items, total_pages;
    total_items = CreditStore.find({}).count();
    total_pages = Math.ceil(total_items / ITEMS_PER_PAGE);
    return getSecondaryPageNo() < total_pages;
  };

  Template.cashback_user_values.has_prev = function() {
    return getSecondaryPageNo() >= 2;
  };

  getSecondaryPageNo = function() {
    var slugs;
    slugs = Session.get(CASHBACK_SESSION.SUBURL);
    if (slugs == null) {
      return 1;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 2) {
      return parseInt(slugs[1]);
    }
    return 1;
  };

  getPageNo = function() {
    var slugs;
    slugs = Session.get(CASHBACK_SESSION.SUBURL);
    if (slugs == null) {
      return 1;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      return parseInt(slugs[0]);
    }
    return 1;
  };

  createCashback = function(make_active) {
    var dic;
    if (make_active == null) {
      make_active = false;
    }
    if ($("#cashback-compose-form").parsley("validate")) {
      dic = {
        name: $("#name").val(),
        description: $("#description").val(),
        perc: $("#perc").val(),
        min_spending: $("#min-spending").val(),
        make_active: make_active
      };
      console.log(dic);
      return Meteor.call("new_cashback", dic, function() {
        Router.navigate("/cashback", true);
        return flashAlert("Cashback created!", "");
      });
    }
  };

  getCashbackTemplate = function() {
    var slugs;
    slugs = Session.get(CASHBACK_SESSION.SUBURL);
    if (slugs == null) {
      return CASHBACK_TEMPLATE.MAIN;
    }
    slugs = slugs.split("/");
    slugs = _.filter(slugs, function(s) {
      return s !== "";
    });
    if (slugs.length >= 1) {
      if (slugs[0] === CASHBACK_PAGE.COMPOSE) {
        return CASHBACK_TEMPLATE.COMPOSE_RULE;
      } else if (slugs[0] === CASHBACK_PAGE.TRANSACTION) {
        return CASHBACK_TEMPLATE.TRANSACTION_LOG;
      } else if (slugs[0] === CASHBACK_PAGE.USER_CREDIT) {
        return CASHBACK_TEMPLATE.USER_CREDIT_STORE;
      }
    }
    return CASHBACK_TEMPLATE.MAIN;
  };

}).call(this);
